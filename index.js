#! /usr/bin/env node
import inquirer from "inquirer";
import chalk from "chalk";
console.log(chalk.bold.italic.underline("\n\t\t\t\tWELCOME TO STUDENT MANAGEMENT SYSTEM (SMS)"));
//Creating an object, courseFee, which contains key-value pairs of course names and their corresponding prices
let courseFee = {
    "Programming Fundamentals in Python": 50,
    "Essentials of CyberSecurity": 65,
    "Introduction to Machine Learning": 35,
    "Data Science: Beginner to Advance": 70,
    "Object Oriented Programming in Java": 30
};
//Storing all keys(course names) of courseFee object, to compare with the user selected courses and to use prices accordingly
const keys = Object.keys(courseFee);
//Declaring an array of type Student (interface), this array will store the data of each student, as one entry, entered by the user
let arrayStudents = [];
//A counter to count the total number of students added in the arrayStudents 
var studentCounter = 0;
while (true) {
    console.log();
    //Using inquirer package to prompt the user to select the desired operation
    let option = await inquirer.prompt([
        {
            name: "userChoice",
            type: "list",
            message: "Which operation do you want to perform?",
            choices: ["Add Student", "Remove Student", "Show Student Info", "Update Student Info", "Show List of Students", "Quit"]
        }
    ]);
    //The block of code to add a student to the arrayStudents
    if (option.userChoice === "Add Student") {
        console.log(chalk.magentaBright.underline(`\nEnter the details of student ${studentCounter + 1}:`));
        let studentDetails = await inquirer.prompt([
            {
                name: "name",
                type: "string",
                message: "Name:"
            },
            {
                name: "course",
                type: "checkbox",
                message: "Select the courses:",
                choices: ["Programming Fundamentals in Python     ----- $50", "Essentials of CyberSecurity            ----- $65", "Introduction to Machine Learning       ----- $35", "Data Science: Beginner to Advance      ----- $70", "Object Oriented Programming in Java    ----- $30"]
            },
            {
                name: "availableBalance",
                type: "number",
                message: "Available Balance (In Dollars):"
            }
        ]);
        //Generating random five digit ID for each student
        let randID = Math.floor((Math.random() * 100000) + 10000);
        console.log(`Autogenerated ID: ${randID}`);
        //Calling the calculateTutionFee() function to claculate total fee of a student based on courses selected
        let totalFee = calculateTutionFee(studentDetails.course);
        //Storing data entered by the user in arrayStudents for a student
        arrayStudents[studentCounter] = {
            name: studentDetails.name,
            ID: randID,
            availableBalance: studentDetails.availableBalance,
            course: studentDetails.course,
            tutionFee: totalFee,
            feeStatus: "Pending"
        };
        console.log(`Total Tution Fee: $${arrayStudents[studentCounter].tutionFee}`);
        //Checking and printing the status of tution fee of a student
        if (arrayStudents[studentCounter].tutionFee <= studentDetails.availableBalance) {
            arrayStudents[studentCounter].availableBalance -= arrayStudents[studentCounter].tutionFee;
            console.log(chalk.greenBright("Tution Fee Paid Successfully!"));
            console.log(`Remaining Balance: $${arrayStudents[studentCounter].availableBalance}`);
            arrayStudents[studentCounter].feeStatus = "Paid";
        }
        else {
            console.log(chalk.redBright("Insufficient Balance, Tution Fee Paid Unsuccessful!"));
            console.log(`Remaining Balance: $${arrayStudents[studentCounter].availableBalance}`);
        }
        studentCounter++;
    }
    //The block of code to show list of students already stored in the arrayStudents array
    if (option.userChoice === "Show List of Students") {
        if (arrayStudents.length == 0) {
            console.log(chalk.gray("EMPTY STUDENT LIST!"));
        }
        else {
            console.log(chalk.blueBright.underline(`\nThe list of students enrolled:`));
            for (let i = 0; i < arrayStudents.length; i++) {
                console.log(`${i + 1}- ${arrayStudents[i].name}`);
            }
        }
    }
    var studentNames = arrayStudents.map(Student => Student.name);
    //The block of code to remove details of the student from the arrayStudents array
    if (option.userChoice === "Remove Student") {
        if (arrayStudents.length == 0) {
            console.log(chalk.gray("EMPTY STUDENT LIST!"));
        }
        else {
            console.log();
            let removeStudent = await inquirer.prompt([
                {
                    name: "student",
                    type: "rawlist",
                    message: chalk.blueBright.underline("Select the student from the list below to remove:"),
                    choices: studentNames
                }
            ]);
            const studentIndex = arrayStudents.findIndex(Student => Student.name === removeStudent.student);
            arrayStudents.splice(studentIndex, 1);
            console.log(chalk.gray(`The record of \"${removeStudent.student}\" has been removed!`));
        }
    }
    //The block of code to update the info of a particular student, selected by the user
    if (option.userChoice === "Update Student Info") {
        if (arrayStudents.length != 0) {
            console.log();
            let update = await inquirer.prompt([
                {
                    name: "student",
                    type: "rawlist",
                    message: chalk.blueBright.underline("Select the student from the list to update the information:"),
                    choices: studentNames
                },
                {
                    name: "info",
                    type: "rawlist",
                    message: "\nSelect the information which you want to update for selected student:",
                    choices: ["ID", "Add Course", "Add Balance", "Update Fee Status"]
                }
            ]);
            const indexStudent = arrayStudents.findIndex(Student => Student.name === update.student);
            //The switch statement to update the particular info of a selected student
            switch (update.info) {
                case "ID":
                    let ID = await inquirer.prompt([
                        {
                            name: "newID",
                            type: "number",
                            message: `Enter the new ID for ${update.student}:`
                        }
                    ]);
                    arrayStudents[indexStudent].ID = ID.newID;
                    console.log(chalk.greenBright(`ID of \"${update.student}\" updated successfully!`));
                    break;
                case "Add Balance":
                    let balance = await inquirer.prompt([
                        {
                            name: "add",
                            type: "number",
                            message: `Enter the balance to add to ${update.student}'s account:`
                        }
                    ]);
                    console.log(`Previous Balance: ${arrayStudents[indexStudent].availableBalance}`);
                    arrayStudents[indexStudent].availableBalance += balance.add;
                    console.log(`New Balance: ${arrayStudents[indexStudent].availableBalance}`);
                    console.log(chalk.greenBright(`Balance of \"${update.student}\" updated successfully!`));
                    break;
                case "Update Fee Status":
                    let status = await inquirer.prompt([
                        {
                            name: "fee",
                            type: "rawlist",
                            message: `Select the updated fee status of ${update.student}:`,
                            choices: ["Paid", "Pending"]
                        }
                    ]);
                    if (arrayStudents[indexStudent].availableBalance >= arrayStudents[indexStudent].tutionFee) {
                        arrayStudents[indexStudent].feeStatus = status.fee;
                        console.log(chalk.greenBright(`Fee status of \"${update.student}\" updated successfully!`));
                        arrayStudents[indexStudent].availableBalance -= arrayStudents[indexStudent].tutionFee;
                        console.log(`Remaining Balance: ${arrayStudents[indexStudent].availableBalance}`);
                    }
                    else {
                        console.log(`Tution Fee: ${arrayStudents[indexStudent].tutionFee}`);
                        console.log(`Available Balance: ${arrayStudents[indexStudent].availableBalance}`);
                        console.log(chalk.redBright("Sorry the tution fee cannot be paid! Insufficient Balance!"));
                    }
                    break;
                case "Add Course":
                    let arrayCourses = ["Programming Fundamentals in Python     ----- $50", "Essentials of CyberSecurity            ----- $65", "Introduction to Machine Learning       ----- $35", "Data Science: Beginner to Advance      ----- $70", "Object Oriented Programming in Java    ----- $30"];
                    for (let z = 0; z < arrayStudents[indexStudent].course.length; z++) {
                        for (let w = 0; w < arrayCourses.length; w++) {
                            if (arrayStudents[indexStudent].course[z] === arrayCourses[w])
                                arrayCourses.splice(arrayCourses.indexOf(arrayCourses[w]), 1);
                        }
                    }
                    if (arrayCourses.length != 0) {
                        let add = await inquirer.prompt([
                            {
                                name: "course",
                                type: "checkbox",
                                message: `Select the more courses you want to add for ${update.student}:`,
                                choices: arrayCourses
                            }
                        ]);
                        for (let n = 0; n < add.course.length; n++) {
                            arrayStudents[indexStudent].course.push(add.course[n]);
                        }
                        console.log(chalk.greenBright(`New courses for ${update.student} has been added successfully!`));
                        arrayStudents[indexStudent].tutionFee = calculateTutionFee(arrayStudents[indexStudent].course);
                        console.log(chalk.greenBright(`New Tution Fee: ${arrayStudents[indexStudent].tutionFee}`));
                    }
                    else {
                        console.log(chalk.gray("Student has already enrolled in all the courses!"));
                    }
            }
        }
        else {
            console.log(chalk.gray("EMPTY STUDENT LIST!"));
        }
    }
    //The block of code to show information of a students by selecting the name of a desired student from the students available
    if (option.userChoice === "Show Student Info") {
        if (arrayStudents.length == 0) {
            console.log(chalk.gray("EMPTY STUDENT LIST!"));
        }
        else {
            console.log();
            let studentDetail = await inquirer.prompt([
                {
                    name: "info",
                    type: "rawlist",
                    message: chalk.blueBright.underline("Select the student from the list to view his/her details:"),
                    choices: studentNames
                }
            ]);
            const studentIndex = arrayStudents.findIndex(Student => Student.name === studentDetail.info);
            showStudentDetails(arrayStudents[studentIndex]);
        }
    }
    //If user selects "Quit", while loop will break and the program terminates
    if (option.userChoice === "Quit") {
        console.log(chalk.bold.italic("\n\t\t\t    THANK YOU FOR USING OUR STUDENT MANAGEMENT SYSTEM!"));
        break;
    }
}
//Defining a function to caluclate the total fee of a student
function calculateTutionFee(courses) {
    let fee = 0;
    for (let j = 0; j < courses.length; j++) {
        let courseName = courses[j].split("-----")[0].trim();
        if (keys.includes(courseName)) {
            fee += courseFee[courseName];
        }
    }
    return fee;
}
//Defining a function to show details of a student based on the selection made by the user
function showStudentDetails(student) {
    console.log(chalk.blueBright.underline(`\nThe details of \"${student.name}\" are:`));
    console.log(`Name: ${student.name}\nID: ${student.ID}`);
    console.log("Courses Enrolled:");
    for (let k = 0; k < student.course.length; k++) {
        console.log(`${k + 1}- ${student.course[k].split("-----")[0].trim()}`);
    }
    console.log(`Available Balance: $${student.availableBalance}\nFee Status: ${student.feeStatus}`);
}
